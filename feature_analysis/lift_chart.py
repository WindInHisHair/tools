import xgboost as xgb
import pandas as pd
import matplotlib.pyplot as plt

from local_config import model_file
from extra_feature_from_raw_data import load_data

def make_prediction():

	model = xgb.Booster(model_file=model_file)
	data, label = load_data()

	ddata = xgb.DMatrix(data, label=label)
	predict = model.predict(ddata)
	hist = []

	for i in range(len(predict)):	
		hist.append[[predict[i], label[i]]]

	sorted(hist,reverse=True)

	return hist

def prepare_data(data, label):
	# data and label should share the same size
	num = len(data)
	predict = [ [data[i], label[i] ]for i in range(num)]

	# sort the predict accoring to probability generated by model
	sorted(predict, reverse=True)	

	chart_data = [each[1] for each in predict]

	step = len(chart_data) /10
	r = len(chart_data) %10

	group_data = [chart_data[i*step:(i+1)*step] for i in range(10)]
	if not r:
		group_data[-1] += chart_data[step*10:]

	return group_data


def draw_lift_chart(data, label):
	
	group_data = prepare_data(data, label)
	drawing_data = [sum(each)/(0.0 + len(each)) for each in group_data]

	#drawing_data should be in a descreased order, otherwise the model or feature is not consistent 
	Y = drawing_data
	X = range(10)
	plt.bar(X,Y)
	plt.show()
	


def lorenz_curve(data, label):
	group_data = prepare_data(data, label)

	occupied_data = [sum(each)/(0.0 + len(each)) for each in group_data]
	num = len(occupied_data)
	drawing_data = [ sum(occupied_data[:i+1])/(i+1.0) for i in range(num)]

	X = range(num)
	plt.plot(X, drawing_data)
	plt.show()
	